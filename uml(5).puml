@startuml

skinparam dpi 200
scale 10000 width
scale 15000 height

class invaders.rendering.Animator {
- List<Animation> animations
- Animation state
+ void setState(String)
+ Animation getState()
}
class invaders.ConfigReader {
- {static} JSONObject gameInfo
- {static} JSONObject playerInfo
- {static} JSONArray bunkersInfo
- {static} JSONArray enemiesInfo
+ {static} void parse(String)
+ {static} JSONObject getGameInfo()
+ {static} JSONObject getPlayerInfo()
+ {static} JSONArray getBunkersInfo()
+ {static} JSONArray getEnemiesInfo()
}
class invaders.util.gameUndo {
- Stack<gameState> saves
+ gameState Undo()
+ void saveCurrentState(gameState)
+ Stack<gameState> getSaves()
+ void setSaves(Stack<gameState>)
+ {static} gameState saveGameState(GameEngine)
+ {static} void gameUndoSave(gameState,GameEngine)
}
class invaders.builder.BunkerBuilder {
- Bunker bunker
+ void buildPosition(Vector2D)
+ void buildLives(int)
+ GameObject createGameObject()
+ void reset()
+ void buildImage(Image)
}
interface invaders.entities.EntityView {
~ void update(double,double)
~ boolean matchesEntity(Renderable)
~ void markForDelete()
~ Node getNode()
~ boolean isMarkedForDelete()
}
class invaders.factory.EnemyProjectile {
- ProjectileStrategy strategy
+ void update(GameEngine)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ GameObject clones()
}
class invaders.entities.EntityViewImpl {
- Renderable entity
- Vector2D position
- boolean delete
- ImageView node
- {static} double getViewOrder(Renderable.Layer)
+ void update(double,double)
+ boolean matchesEntity(Renderable)
+ void markForDelete()
+ Node getNode()
+ boolean isMarkedForDelete()
}
class invaders.strategy.SlowProjectileStrategy {
+ void update(Projectile)
}
interface invaders.gameobject.GameObject {
+ void start()
+ void update(GameEngine)
+ boolean isAlive()
+ Object clones()
}
interface invaders.physics.Collider {
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ boolean isColliding(Collider)
}
class invaders.cheat.Cheat {
+ {static} ArrayList<List<Enemy>> removeSlowEnemy(GameEngine,List<EntityView>)
+ {static} ArrayList<List<Enemy>> removeFastEnemy(GameEngine,List<EntityView>)
+ {static} ArrayList<List<Projectile>> removeFastProjectile(GameEngine,List<EntityView>)
+ {static} ArrayList<List<Projectile>> removeSlowProjectile(GameEngine,List<EntityView>)
}
interface invaders.state.BunkerState {
+ void takeDamage()
+ BunkerState clone(Bunker)
}
class invaders.engine.KeyboardInputHandler {
- GameEngine model
- boolean left
- boolean right
- Set<KeyCode> pressedKeys
- Map<String,MediaPlayer> sounds
~ void handlePressed(KeyEvent)
~ void handleReleased(KeyEvent)
}
interface invaders.rendering.Animation {
+ String getName()
+ Image getCurrentFrame()
+ void next()
}
class invaders.gameobject.Bunker {
- Vector2D position
- double width
- double height
- int lives
- Image image
- BunkerState state
+ void start()
+ void update(GameEngine)
+ void setPosition(Vector2D)
+ Vector2D getPosition()
+ Layer getLayer()
+ Image getImage()
+ void takeDamage(double)
+ double getHealth()
+ String getRenderableObjectName()
+ boolean isAlive()
+ Renderable clones()
+ double getWidth()
+ void setWidth(double)
+ double getHeight()
+ void setHeight(double)
+ int getLives()
+ void setLives(int)
+ void setImage(Image)
+ BunkerState getState()
+ void setState(BunkerState)
+ String getStrategy()
+ String getEnemyLevel(Renderable)
}
class invaders.state.YellowState {
- Bunker bunker
+ void takeDamage()
+ BunkerState clone(Bunker)
}
interface invaders.rendering.Renderable {
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Renderable.Layer getLayer()
+ boolean isAlive()
+ void takeDamage(double)
+ double getHealth()
+ Object clones()
+ boolean isColliding(Renderable)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
}
enum invaders.rendering.Layer {
+  BACKGROUND
+  FOREGROUND
+  EFFECT
}
class invaders.builder.Director {
+ Bunker constructBunker(BunkerBuilder,JSONObject)
+ Enemy constructEnemy(GameEngine,EnemyBuilder,JSONObject)
}
class invaders.score.scoreBroad {
+ {static} void updateScoreCount(Renderable)
}
class invaders.strategy.FastProjectileStrategy {
+ void update(Projectile)
}
class invaders.event.ScoreEvent {
+ {static} EventType<ScoreEvent> SCORE_CHANGED
- int scoreChange
+ int getScoreChange()
}
class invaders.factory.PlayerProjectileFactory {
+ Projectile createProjectile(Vector2D,ProjectileStrategy,Image)
}
class invaders.physics.Vector2D {
- double x
- double y
+ double getX()
+ double getY()
+ void setX(double)
+ void setY(double)
}
class invaders.entities.Player {
- Vector2D position
- double health
- double velocity
- double width
- double height
- Image image
- ProjectileFactory playerProjectileFactory
+ void takeDamage(double)
+ double getHealth()
+ Renderable clones()
+ boolean isAlive()
+ int getLives()
+ void up()
+ void down()
+ void left()
+ void right()
+ Projectile shoot()
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Layer getLayer()
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
}
class invaders.gameobject.Enemy {
- Vector2D position
- int lives
- Image image
- int xVel
- ArrayList<Projectile> enemyProjectile
- ArrayList<Projectile> pendingToDeleteEnemyProjectile
- ProjectileStrategy projectileStrategy
- ProjectileFactory projectileFactory
- Image projectileImage
- Random random
+ void start()
+ void update(GameEngine)
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Layer getLayer()
+ void setPosition(Vector2D)
+ void setLives(int)
+ void setImage(Image)
+ void setProjectileImage(Image)
+ void takeDamage(double)
+ double getHealth()
+ String getRenderableObjectName()
+ boolean isAlive()
+ void setProjectileStrategy(ProjectileStrategy)
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ int getxVel()
+ GameObject clones()
}
class invaders.builder.EnemyBuilder {
- Enemy enemy
+ void buildPosition(Vector2D)
+ void buildLives(int)
+ GameObject createGameObject()
+ void reset()
+ void buildImageAndStrategy(String)
}
class invaders.physics.BoxCollider {
- double width
- double height
- Vector2D position
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
}
class invaders.util.styleModify {
+ {static} Button buttonStyle(Button)
+ {static} Label setLabel(Label)
+ {static} List<FadeTransition> initAnimation(Label)
}
class invaders.strategy.NormalProjectileStrategy {
+ void update(Projectile)
}
class invaders.engine.GameWindow {
- int width
- int height
- Scene scene
- {static} Pane pane
- {static} GameEngine model
- {static} List<EntityView> entityViews
- Renderable background
- {static} double xViewportOffset
- {static} double yViewportOffset
- {static} int gameTime
+ {static} Label timerTime
+ Label timerTitle
- {static} int score
+ {static} Label scoreCount
+ {static} Label scoreTitle
- {static} gameUndo gameUndo
- {static} gameState gameState
- {static} Label cheatModeLabel
+ void run()
- void draw()
+ Scene getScene()
+ void updateTimer()
+ {static} void updateScore(int)
+ {static} void resetStatic(int)
+ {static} void updatePane(List<Renderable>,List<GameObject>)
+ {static} void showCheatLabel(boolean)
+ {static} void cheatModeSelection(String)
}
abstract class invaders.factory.Projectile {
# int lives
- Vector2D position
- Image image
+ Vector2D getPosition()
+ Image getImage()
+ Layer getLayer()
+ void start()
+ double getWidth()
+ double getHeight()
+ void takeDamage(double)
+ double getHealth()
+ boolean isAlive()
+ GameObject clone()
}
abstract class invaders.builder.Builder {
+ {abstract}void buildPosition(Vector2D)
+ {abstract}void buildLives(int)
+ {abstract}GameObject createGameObject()
+ {abstract}void reset()
}
class invaders.util.gameState {
- int score
- int time
- List<Enemy> enemyList
- List<Bunker> bunkersList
- List<Projectile> projectileList
- List<Player> playerList
- List<Renderable> renderables
- List<GameObject> gameObjects
+ int getScore()
+ void setScore(int)
+ int getTime()
+ void setTime(int)
+ List<Renderable> getRenderables()
+ void setRenderables(List<Renderable>)
+ List<GameObject> getGameObjects()
+ void setGameObjects(List<GameObject>)
}
interface invaders.factory.ProjectileFactory {
+ Projectile createProjectile(Vector2D,ProjectileStrategy,Image)
}
class invaders.factory.PlayerProjectile {
- ProjectileStrategy strategy
+ void update(GameEngine)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ GameObject clones()
}
class invaders.entities.SpaceBackground {
- Rectangle space
- Pane pane
- GameEngine model
+ String getStrategy()
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Layer getLayer()
+ boolean isAlive()
+ void takeDamage(double)
+ double getHealth()
+ String getRenderableObjectName()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ Renderable clones()
}
class invaders.App {
- {static} String gameDiff
- {static} String easy
- {static} String medium
- {static} String hard
+ {static} void main(String[])
+ void start(Stage)
~ {static} void startGame(Stage,String)
}
class invaders.state.RedState {
- Bunker bunker
+ void takeDamage()
+ BunkerState clone(Bunker)
}
class invaders.engine.GameEngine {
- List<GameObject> gameObjects
- List<GameObject> pendingToAddGameObject
- List<GameObject> pendingToRemoveGameObject
- List<Renderable> pendingToAddRenderable
- List<Renderable> pendingToRemoveRenderable
- List<Renderable> renderables
+ Player player
- boolean left
- boolean right
- int gameWidth
- int gameHeight
- int timer
~ List<Player> playerList
- {static} gameState currentGameState
- {static} gameState previousGameState
- boolean cheatMode
+ void update()
+ List<Renderable> getRenderables()
+ List<GameObject> getGameObjects()
+ List<GameObject> getPendingToAddGameObject()
+ List<GameObject> getPendingToRemoveGameObject()
+ List<Renderable> getPendingToAddRenderable()
+ List<Renderable> getPendingToRemoveRenderable()
+ void leftReleased()
+ void rightReleased()
+ void leftPressed()
+ void rightPressed()
+ boolean shootPressed()
- void movePlayer()
+ int getGameWidth()
+ int getGameHeight()
+ Player getPlayer()
~ void saveCurrentGame()
+ void undoGame()
+ void setRenderables(List<Renderable>)
+ void setGameObjects(List<GameObject>)
+ void hackerOn()
+ void Hacker(String)
}
interface invaders.physics.Moveable {
+ void up()
+ void down()
+ void left()
+ void right()
}
class invaders.state.GreenState {
- Bunker bunker
+ void takeDamage()
+ BunkerState clone(Bunker)
}
class invaders.factory.EnemyProjectileFactory {
+ Projectile createProjectile(Vector2D,ProjectileStrategy,Image)
}
interface invaders.strategy.ProjectileStrategy {
+ void update(Projectile)
}


invaders.builder.Builder <|-- invaders.builder.BunkerBuilder
invaders.factory.Projectile <|-- invaders.factory.EnemyProjectile
invaders.entities.EntityView <|.. invaders.entities.EntityViewImpl
invaders.strategy.ProjectileStrategy <|.. invaders.strategy.SlowProjectileStrategy

invaders.gameobject.GameObject <|.. invaders.gameobject.Bunker
invaders.rendering.Renderable <|.up. invaders.gameobject.Bunker

invaders.state.BunkerState <|.. invaders.state.YellowState
invaders.strategy.ProjectileStrategy <|.. invaders.strategy.FastProjectileStrategy
javafx.event.Event <|-- invaders.event.ScoreEvent
invaders.factory.ProjectileFactory <|.. invaders.factory.PlayerProjectileFactory
invaders.physics.Moveable <|.. invaders.entities.Player
invaders.rendering.Renderable <|.up.  invaders.entities.Player

invaders.gameobject.GameObject <|.. invaders.gameobject.Enemy
invaders.rendering.Renderable <|.up.  invaders.gameobject.Enemy

invaders.builder.Builder <|-- invaders.builder.EnemyBuilder
invaders.physics.Collider <|.. invaders.physics.BoxCollider
invaders.strategy.ProjectileStrategy <|.. invaders.strategy.NormalProjectileStrategy
invaders.rendering.Renderable <|.up.  invaders.factory.Projectile
invaders.gameobject.GameObject <|.. invaders.factory.Projectile

invaders.factory.Projectile <|-- invaders.factory.PlayerProjectile
invaders.rendering.Renderable <|.up.  invaders.entities.SpaceBackground

javafx.application.Application <|-- invaders.App
invaders.state.BunkerState <|.. invaders.state.RedState
invaders.state.BunkerState <|.. invaders.state.GreenState
invaders.factory.ProjectileFactory <|.. invaders.factory.EnemyProjectileFactory
@enduml