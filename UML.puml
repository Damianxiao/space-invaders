@startuml
!define RECTANGLE class

skinparam dpi 300
scale 800 width
rectangle Animator {
- List<Animation> animations
- Animation state
+ void setState(String)
+ Animation getState()
}

rectangle ConfigReader {
- {static} JSONObject gameInfo
- {static} JSONObject playerInfo
- {static} JSONArray bunkersInfo
- {static} JSONArray enemiesInfo
+ {static} void parse(String)
+ {static} JSONObject getGameInfo()
+ {static} JSONObject getPlayerInfo()
+ {static} JSONArray getBunkersInfo()
+ {static} JSONArray getEnemiesInfo()
}

rectangle gameUndo {
- Stack<gameState> saves
+ gameState Undo()
+ void saveCurrentState(gameState)
+ Stack<gameState> getSaves()
+ void setSaves(Stack<gameState>)
}

rectangle BunkerBuilder {
- Bunker bunker
+ void buildPosition(Vector2D)
+ void buildLives(int)
+ GameObject createGameObject()
+ void reset()
+ void buildImage(Image)
}

rectangle EntityView {
~ void update(double,double)
~ boolean matchesEntity(Renderable)
~ void markForDelete()
~ Node getNode()
~ boolean isMarkedForDelete()
}

rectangle EnemyProjectile {
- ProjectileStrategy strategy
+ void update(GameEngine)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ GameObject clones()
}

rectangle EntityViewImpl {
- Renderable entity
- Vector2D position
- boolean delete
- ImageView node
- {static} double getViewOrder(Renderable.Layer)
+ void update(double,double)
+ boolean matchesEntity(Renderable)
+ void markForDelete()
+ Node getNode()
+ boolean isMarkedForDelete()
}

rectangle SlowProjectileStrategy {
+ void update(Projectile)
}

rectangle GameObject {
+ void start()
+ void update(GameEngine)
+ boolean isAlive()
+ Object clones()
}

rectangle Collider {
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ boolean isColliding(Collider)
}

rectangle BunkerState {
+ void takeDamage()
+ BunkerState clone(Bunker)
}

rectangle KeyboardInputHandler {
- GameEngine model
- boolean left
- boolean right
- Set<KeyCode> pressedKeys
- Map<String,MediaPlayer> sounds
~ void handlePressed(KeyEvent)
~ void handleReleased(KeyEvent)
}

rectangle Animation {
+ String getName()
+ Image getCurrentFrame()
+ void next()
}

rectangle Bunker {
- Vector2D position
- double width
- double height
- int lives
- Image image
- BunkerState state
+ void start()
+ void update(GameEngine)
+ void setPosition(Vector2D)
+ Vector2D getPosition()
+ Layer getLayer()
+ Image getImage()
+ void takeDamage(double)
+ double getHealth()
+ String getRenderableObjectName()
+ boolean isAlive()
+ Renderable clones()
+ double getWidth()
+ void setWidth(double)
+ double getHeight()
+ void setHeight(double)
+ int getLives()
+ void setLives(int)
+ void setImage(Image)
+ BunkerState getState()
+ void setState(BunkerState)
+ String getStrategy()
+ String getEnemyLevel(Renderable)
}

rectangle YellowState {
- Bunker bunker
+ void takeDamage()
+ BunkerState clone(Bunker)
}

rectangle Renderable {
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Renderable.Layer getLayer()
+ boolean isAlive()
+ void takeDamage(double)
+ double getHealth()
+ Object clones()
+ boolean isColliding(Renderable)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
}

rectangle Layer {
+  BACKGROUND
+  FOREGROUND
+  EFFECT
}

rectangle Director {
+ Bunker constructBunker(BunkerBuilder,JSONObject)
+ Enemy constructEnemy(GameEngine,EnemyBuilder,JSONObject)
}

rectangle FastProjectileStrategy {
+ void update(Projectile)
}

rectangle ScoreEvent {
+ {static} EventType<ScoreEvent> SCORE_CHANGED
- int scoreChange
+ int getScoreChange()
}

rectangle PlayerProjectileFactory {
+ Projectile createProjectile(Vector2D,ProjectileStrategy,Image)
}

rectangle Vector2D {
- double x
- double y
+ double getX()
+ double getY()
+ void setX(double)
+ void setY(double)
}

rectangle Player {
- Vector2D position
- double health
- double velocity
- double width
- double height
- Image image
- ProjectileFactory playerProjectileFactory
+ void takeDamage(double)
+ double getHealth()
+ Renderable clones()
+ boolean isAlive()
+ int getLives()
+ void up()
+ void down()
+ void left()
+ void right()
+ Projectile shoot()
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Layer getLayer()
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
}

rectangle Enemy {
- Vector2D position
- int lives
- Image image
- int xVel
- ArrayList<Projectile> enemyProjectile
- ArrayList<Projectile> pendingToDeleteEnemyProjectile
- ProjectileStrategy projectileStrategy
- ProjectileFactory projectileFactory
- Image projectileImage
- Random random
+ void start()
+ void update(GameEngine)
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Layer getLayer()
+ void setPosition(Vector2D)
+ void setLives(int)
+ void setImage(Image)
+ void setProjectileImage(Image)
+ void takeDamage(double)
+ double getHealth()
+ String getRenderableObjectName()
+ boolean isAlive()
+ void setProjectileStrategy(ProjectileStrategy)
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ int getxVel()
+ GameObject clones()
}

rectangle EnemyBuilder {
- Enemy enemy
+ void buildPosition(Vector2D)
+ void buildLives(int)
+ GameObject createGameObject()
+ void reset()
+ void buildImageAndStrategy(String)
}

rectangle BoxCollider {
- double width
- double height
- Vector2D position
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
}

rectangle NormalProjectileStrategy {
+ void update(Projectile)
}

rectangle GameWindow {
- int width
- int height
- Scene scene
- {static} Pane pane
- {static} GameEngine model
- {static} List<EntityView> entityViews
- Renderable background
- {static} double xViewportOffset
- {static} double yViewportOffset
- {static} int gameTime
+ {static} Label timerTime
+ Label timerTitle
- {static} int score
+ {static} Label scoreCount
+ {static} Label scoreTitle
- {static} gameUndo gameUndo
- {static} gameState gameState
- {static} Label cheatModeLabel
+ void run()
- void draw()
+ Scene getScene()
+ Label setLabel(Label)
+ void updateTimer()
+ {static} void updateScore(int)
+ {static} void resetStatic(int)
+ {static} void updatePane(List<Renderable>,List<GameObject>)
+ {static} void showCheatLabel(boolean)
+ {static} void cheatModeSelection(String)
}



