@startuml

skinparam dpi 15000
scale 10000 width
scale 15000 height

interface rendering.Renderable {
+ Image getImage()
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ Renderable.Layer getLayer()
+ boolean isAlive()
+ void takeDamage(double)
+ double getHealth()
+ Object clones()
+ boolean isColliding(Renderable)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
}

interface gameobject.GameObject {
+ void start()
+ void update(GameEngine)
+ boolean isAlive()
+ Object clones()
}


'interface rendering.Animation {
'+ String getName()
'+ Image getCurrentFrame()
'+ void next()
'}

interface physics.Collider {
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
+ boolean isColliding(Collider)
}
interface state.BunkerState {
+ void takeDamage()
+ BunkerState clone(Bunker)
}
interface entities.EntityView {
~ void update(double,double)
~ boolean matchesEntity(Renderable)
~ void markForDelete()
~ Node getNode()
~ boolean isMarkedForDelete()
}
'class rendering.Animator {
'- List<Animation> animations
'- Animation state
'+ void setState(String)
'+ Animation getState()
'}
class ConfigReader {
- {static} JSONObject gameInfo
- {static} JSONObject playerInfo
- {static} JSONArray bunkersInfo
- {static} JSONArray enemiesInfo
+ {static} JSONArray getInfo()
}
together  {
     class util.gameUndo {
     - Stack<gameState> saves
     + gameState Undo()
     + void saveCurrentState(gameState)
     + Stack<gameState> getSaves()
     + void setSaves(Stack<gameState>)
     }
     class builder.BunkerBuilder {
     - Bunker bunker
     + void buildPosition(Vector2D)
     + void buildLives(int)
     + GameObject createGameObject()
     + void reset()
     + void buildImage(Image)
     }
     class util.gameState {
     - int score
     - int time
     - List<Enemy> enemyList
     - List<Bunker> bunkersList
     - List<Projectile> projectileList
     - List<Player> playerList
     - List<Renderable> renderables
     - List<GameObject> gameObjects
     + int getScore()
     + void setScore(int)
     + int getTime()
     + void setTime(int)
     + List<Renderable> getRenderables()
     + void setRenderables(List<Renderable>)
     + List<GameObject> getGameObjects()
     + void setGameObjects(List<GameObject>)
     }
}

class factory.EnemyProjectile {
- ProjectileStrategy strategy
+ void update(GameEngine)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ GameObject clones()
}
class entities.EntityViewImpl {
- Renderable entity
- Vector2D position
- boolean delete
- ImageView node
- {static} double getViewOrder(Renderable.Layer)
+ void update(double,double)
+ boolean matchesEntity(Renderable)
+ void markForDelete()
+ Node getNode()
+ boolean isMarkedForDelete()
}
class strategy.SlowProjectileStrategy {
+ void update(Projectile)
}

class engine.KeyboardInputHandler {
- GameEngine model
- boolean left
- boolean right
- Set<KeyCode> pressedKeys
- Map<String,MediaPlayer> sounds
~ void handlePressed(KeyEvent)
~ void handleReleased(KeyEvent)
}


class state.YellowState {
- Bunker bunker
+ void takeDamage()
+ BunkerState clone(Bunker)
}

'enum rendering.Layer {
'+  BACKGROUND
'+  FOREGROUND
'+  EFFECT
'}
class builder.Director {
+ Bunker constructBunker(BunkerBuilder,JSONObject)
+ Enemy constructEnemy(GameEngine,EnemyBuilder,JSONObject)
}
class strategy.FastProjectileStrategy {
+ void update(Projectile)
}
class event.ScoreEvent {
+ {static} EventType<ScoreEvent> SCORE_CHANGED
- int scoreChange
+ int getScoreChange()
}
class factory.PlayerProjectileFactory {
+ Projectile createProjectile(Vector2D,ProjectileStrategy,Image)
}
class physics.Vector2D {
- double x
- double y
+ double getX()
+ double getY()
+ void setX(double)
+ void setY(double)
}


class builder.EnemyBuilder {
- Enemy enemy
+ void buildPosition(Vector2D)
+ void buildLives(int)
+ GameObject createGameObject()
+ void reset()
+ void buildImageAndStrategy(String)
}
class physics.BoxCollider {
- double width
- double height
- Vector2D position
+ double getWidth()
+ double getHeight()
+ Vector2D getPosition()
}
class strategy.NormalProjectileStrategy {
+ void update(Projectile)
}
class engine.GameWindow {
- int width
- int height
- Scene scene
- {static} Pane pane
- {static} GameEngine model
- {static} List<EntityView> entityViews
- Renderable background
- {static} double xViewportOffset
- {static} double yViewportOffset
- {static} int gameTime
+ {static} Label timerTime
+ Label timerTitle
- {static} int score
+ {static} Label scoreCount
+ {static} Label scoreTitle
- {static} gameUndo gameUndo
- {static} gameState gameState
- {static} Label cheatModeLabel
+ void run()
- void draw()
+ Scene getScene()
+ Label setLabel(Label)
+ void updateTimer()
+ {static} void updateScore(int)
+ {static} void resetStatic(int)
+ {static} void updatePane(List<Renderable>,List<GameObject>)
+ {static} void showCheatLabel(boolean)
+ {static} void cheatModeSelection(String)
}
abstract class factory.Projectile {
# int lives
- Vector2D position
- Image image
+ Vector2D getPosition()
+ Image getImage()
+ Layer getLayer()
+ void start()
+ double getWidth()
+ double getHeight()
+ void takeDamage(double)
+ double getHealth()
+ boolean isAlive()
+ GameObject clone()
}
abstract class builder.Builder {
+ {abstract}void buildPosition(Vector2D)
+ {abstract}void buildLives(int)
+ {abstract}GameObject createGameObject()
+ {abstract}void reset()
}


class factory.PlayerProjectile {
- ProjectileStrategy strategy
+ void update(GameEngine)
+ String getRenderableObjectName()
+ String getStrategy()
+ String getEnemyLevel(Renderable)
+ int getLives()
+ GameObject clones()
}

class App {
- {static} String gameDiff
- {static} String easy
- {static} String medium
- {static} String hard
+ {static} void main(String[])
+ void start(Stage)
- void startGame(Stage,String)
+ Button buttonStyle(Button)
}
class state.RedState {
- Bunker bunker
+ void takeDamage()
+ BunkerState clone(Bunker)
}
class engine.GameEngine {
- List<GameObject> gameObjects
- List<GameObject> pendingToAddGameObject
- List<GameObject> pendingToRemoveGameObject
- List<Renderable> pendingToAddRenderable
- List<Renderable> pendingToRemoveRenderable
- List<Renderable> renderables
- Player player
- boolean left
- boolean right
- int gameWidth
- int gameHeight
- int timer
~ List<Player> playerList
- {static} gameState currentGameState
- {static} gameState previousGameState
- boolean cheatMode
+ void update()
+ List<Renderable> getRenderables()
+ List<GameObject> getGameObjects()
+ List<GameObject> getPendingToAddGameObject()
+ List<GameObject> getPendingToRemoveGameObject()
+ List<Renderable> getPendingToAddRenderable()
+ List<Renderable> getPendingToRemoveRenderable()
+ void leftReleased()
+ void rightReleased()
+ void leftPressed()
+ void rightPressed()
+ boolean shootPressed()
- void movePlayer()
+ int getGameWidth()
+ int getGameHeight()
+ Player getPlayer()
+ void updateScoreCount(Renderable)
~ void saveCurrentGame()
+ void undoGame()
+ void setRenderables(List<Renderable>)
+ void setGameObjects(List<GameObject>)
+ void hackerOn()
+ void Hacker(String)
}

class state.GreenState {
- Bunker bunker
+ void takeDamage()
+ BunkerState clone(Bunker)
}
class factory.EnemyProjectileFactory {
+ Projectile createProjectile(Vector2D,ProjectileStrategy,Image)
}
together {
    class gameobject.Bunker {
    - Vector2D position
    - double width
    - double height
    - int lives
    - Image image
    - BunkerState state
    + void start()
    + void update(GameEngine)
    + void setPosition(Vector2D)
    + Vector2D getPosition()
    + Layer getLayer()
    + Image getImage()
    + void takeDamage(double)
    + double getHealth()
    + String getRenderableObjectName()
    + boolean isAlive()
    + Renderable clones()
    + double getWidth()
    + void setWidth(double)
    + double getHeight()
    + void setHeight(double)
    + int getLives()
    + void setLives(int)
    + void setImage(Image)
    + BunkerState getState()
    + void setState(BunkerState)
    + String getStrategy()
    + String getEnemyLevel(Renderable)
    }
    class entities.Player {
    - Vector2D position
    - double health
    - double velocity
    - double width
    - double height
    - Image image
    - ProjectileFactory playerProjectileFactory
    + void takeDamage(double)
    + double getHealth()
    + Renderable clones()
    + boolean isAlive()
    + int getLives()
    + void up()
    + void down()
    + void left()
    + void right()
    + Projectile shoot()
    + Image getImage()
    + double getWidth()
    + double getHeight()
    + Vector2D getPosition()
    + Layer getLayer()
    + String getRenderableObjectName()
    + String getStrategy()
    + String getEnemyLevel(Renderable)
    }
    class gameobject.Enemy {
    - Vector2D position
    - int lives
    - Image image
    - int xVel
    - ArrayList<Projectile> enemyProjectile
    - ArrayList<Projectile> pendingToDeleteEnemyProjectile
    - ProjectileStrategy projectileStrategy
    - ProjectileFactory projectileFactory
    - Image projectileImage
    - Random random
    + void start()
    + void update(GameEngine)
    + Image getImage()
    + double getWidth()
    + double getHeight()
    + Vector2D getPosition()
    + Layer getLayer()
    + void setPosition(Vector2D)
    + void setLives(int)
    + void setImage(Image)
    + void setProjectileImage(Image)
    + void takeDamage(double)
    + double getHealth()
    + String getRenderableObjectName()
    + boolean isAlive()
    + void setProjectileStrategy(ProjectileStrategy)
    + String getStrategy()
    + String getEnemyLevel(Renderable)
    + int getLives()
    + int getxVel()
    + GameObject clones()
    }
    interface factory.ProjectileFactory {
    + Projectile createProjectile(Vector2D,ProjectileStrategy,Image)
    }
    interface strategy.ProjectileStrategy {
    + void update(Projectile)
    }
    interface physics.Moveable {
    + void up()
    + void down()
    + void left()
    + void right()
    }
    class entities.SpaceBackground {
    - Rectangle space
    - Pane pane
    - GameEngine model
    + String getStrategy()
    + Image getImage()
    + double getWidth()
    + double getHeight()
    + Vector2D getPosition()
    + Layer getLayer()
    + boolean isAlive()
    + void takeDamage(double)
    + double getHealth()
    + String getRenderableObjectName()
    + String getEnemyLevel(Renderable)
    + int getLives()
    + Renderable clones()
    }
}

rendering.Renderable <|.up.  gameobject.Bunker
rendering.Renderable <|.up.  entities.Player
rendering.Renderable <|.up. gameobject.Enemy
rendering.Renderable <|.up.  factory.Projectile
rendering.Renderable <|.up. entities.SpaceBackground

gameobject.GameObject <|.up. gameobject.Bunker
gameobject.GameObject <|.down. gameobject.Enemy
gameobject.GameObject <|.down. factory.Projectile


builder.Builder <|-- builder.BunkerBuilder
factory.Projectile <|-- factory.EnemyProjectile
entities.EntityView <|.. entities.EntityViewImpl
strategy.ProjectileStrategy <|.. strategy.SlowProjectileStrategy

state.BunkerState <|.. state.YellowState
strategy.ProjectileStrategy <|.. strategy.FastProjectileStrategy
javafx.event.Event <|-- event.ScoreEvent
factory.ProjectileFactory <|.. factory.PlayerProjectileFactory
physics.Moveable <|.. entities.Player


builder.Builder <|-- builder.EnemyBuilder
physics.Collider <|.. physics.BoxCollider
strategy.ProjectileStrategy <|.. strategy.NormalProjectileStrategy


factory.Projectile <|-- factory.PlayerProjectile

javafx.application.Application <|-- App
state.BunkerState <|.. state.RedState
state.BunkerState <|.. state.GreenState
factory.ProjectileFactory <|.. factory.EnemyProjectileFactory
@enduml